/* Felipe Viviani Kawakami RA: 9105067
Renata de Jesus Fonseca RA: 21284583 */

#include <iostream>
#include<time.h>
#include <stdlib.h>
#include<chrono>




using namespace std;


bool encontrarQueijo(int l, int c, char labirinto[5][5], char rato = 'R', char queijo = 'Q', char entrada = 'E', char parede = 'P', char marcador = 'X') {

int cont = 0, li, ci;

if (cont < 1) {
li = l;
ci = c;
cont++;
}

if (labirinto[l - 1][c] == queijo || labirinto[l + 1][c] == queijo || labirinto[l][c - 1] == queijo || labirinto[l][c + 1] == queijo) {
labirinto[l][c] = rato;
return true;
}
else {
labirinto[l][c] = marcador;
if (labirinto[l - 1][c] == '0' && l - 1 >= 0) {
return encontrarQueijo(l - 1, c, labirinto, 'R', 'Q', 'E', 'P', 'X');
}
else if (labirinto[l][c + 1] == '0' && c + 1 <= 4) {
return encontrarQueijo(l, c + 1, labirinto, 'R', 'Q', 'E', 'P', 'X');
}
else if (labirinto[l][c - 1] == '0' && c - 1 >= 0) {
return encontrarQueijo(l, c - 1, labirinto, 'R', 'Q', 'E', 'P', 'X');
}
else if (labirinto[l + 1][c] == '0' && l + 1 <= 4) {
return encontrarQueijo(l + 1, c, labirinto, 'R', 'Q', 'E', 'P', 'X');
}
else {
return encontrarQueijo(li, ci, labirinto, 'R', 'Q', 'E', 'P', 'X');
}
}
}







int main() {

int i = 0, j = 0, rng, contRato = 0, contParede = 0, contQueijo = 0, contEntrada = 0, ri, rj, linha = 5, coluna = 5;
char labirinto[5][5], rato = 'R', queijo = 'Q', entrada = 'E', parede = 'P', marcador = 'X';


srand(time(NULL));

for (i = 0; i < 5; i++) {
for (j = 0; j < 5; j++) {
rng = rand() % 3;
if (rng == 0 && contParede < 4) {
if (labirinto[i - 1][j + 1] == parede || labirinto[i - 1][j - 1] == parede || labirinto[i + 1][j - 1] == parede || labirinto[i + 1][j + 1] == parede) {
labirinto[i][j] = '0';
}
else {
labirinto[i][j] = parede;
contParede++;
}
}
else if (rng == 1 && contEntrada < 1) {
labirinto[i][j] = entrada;
contEntrada++;
contRato++;
}
else if (rng == 2 && contQueijo < 1) {
if ((i == 0 && j == 0) || (i == 0 && j == 4) || (i == 4 && j == 0) || (i == 0 && j == 4)) {
labirinto[i][j] = '0';
}
else {
labirinto[i][j] = queijo;
contQueijo++;
}
}
else {
labirinto[i][j] = '0';
}

}
}

for (i = 0; i < 5; i++) {
for (j = 0; j < 5; j++) {
if (labirinto[i][j] == entrada) {
ri = i;
rj = j;
}
}
cout << '\n' << '\n';
}
if (ri - 1 > 0 && labirinto[ri - 1][rj] != parede && labirinto[ri - 1][rj] != queijo) {
labirinto[ri - 1][rj] = rato;
}
else if (ri + 1 < 4 && labirinto[ri + 1][rj] != parede && labirinto[ri + 1][rj] != queijo) {
labirinto[ri + 1][rj] = rato;
}
else if (rj - 1 > 0 && labirinto[ri][rj - 1] != parede && labirinto[ri][rj - 1] != queijo) {
labirinto[ri][rj - 1] = rato;
}
else if (rj + 1 < 4 && labirinto[ri][rj + 1] != parede && labirinto[ri][rj + 1] != queijo) {
labirinto[ri][rj + 1] = rato;
}
else {
labirinto[ri][rj] = rato;
}
for (i = 0; i < 5; i++) {
for (j = 0; j < 5; j++) {
if (labirinto[i][j] == rato) {
ri = i;
rj = j;
}
}
cout << '\n' << '\n';
}
for (i = 0; i < 5; i++) {
for (j = 0; j < 5; j++) {
cout << labirinto[i][j] << '\t';
}
cout << '\n' << '\n';
}
cout << '\n' << '\n' << '\n' << '\n';
auto comeco = chrono::high_resolution_clock::now();
encontrarQueijo(ri, rj, labirinto, rato, queijo, entrada, parede, marcador);
auto final = chrono::high_resolution_clock::now();
auto tempoNanosegundos = chrono::duration_cast<chrono::nanoseconds>(final - comeco).count();

for (i = 0; i < 5; i++) {
for (j = 0; j < 5; j++) {
cout << labirinto[i][j] << '\t';
}
cout << '\n' << '\n';
}
cout << '\n' << '\n';
cout << "Tempo de execucao: " << tempoNanosegundos << " Nanosegundos." << endl;
cout << '\n';
return 0;
}